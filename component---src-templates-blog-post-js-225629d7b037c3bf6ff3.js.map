{"version":3,"file":"component---src-templates-blog-post-js-225629d7b037c3bf6ff3.js","mappings":"uJA+BA,IA5Be,SAAC,GAAmC,IAG7CA,EAHYC,EAAgC,EAAhCA,SAAUC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SAE3BC,EADQ,MACKH,EAASI,SAiB5B,OAbEL,EADEI,EAEA,sBAAIE,UAAU,gBACZ,gBAAC,EAAAC,KAAD,CAAMC,GAAG,KAAKN,IAKhB,gBAAC,EAAAK,KAAD,CAAMD,UAAU,mBAAmBE,GAAG,KACnCN,GAML,uBAAKI,UAAU,iBAAiB,oBAAmBF,GACjD,0BAAQE,UAAU,iBAAiBN,GACnC,4BAAOG,GACP,oCAAW,IAAIM,MAAOC,cAAtB,kB,uDCdAC,EAAM,SAAC,GAAwC,IAAD,MAArCC,EAAqC,EAArCA,YAAaC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,KAAMZ,EAAY,EAAZA,MAC9Ba,GAASC,EAAAA,EAAAA,gBAAe,cAAxBD,KAgBFE,EAAkBL,GAAeG,EAAKG,aAAaN,YACnDO,EAAY,UAAGJ,EAAKG,oBAAR,aAAG,EAAmBhB,MAExC,OACE,gBAAC,IAAD,CACEkB,eAAgB,CACdP,KAAAA,GAEFX,MAAOA,EACPmB,cAAeF,EAAY,QAAWA,EAAiB,KACvDL,KAAM,CACJ,CACEQ,KAAK,cACLC,QAASN,GAEX,CACEO,SAAS,WACTD,QAASrB,GAEX,CACEsB,SAAS,iBACTD,QAASN,GAEX,CACEO,SAAS,UACTD,QAAQ,WAEV,CACED,KAAK,eACLC,QAAQ,WAEV,CACED,KAAK,kBACLC,SAAS,UAAAR,EAAKG,oBAAL,mBAAmBO,cAAnB,eAA2BC,UAA3B,IAEX,CACEJ,KAAK,gBACLC,QAASrB,GAEX,CACEoB,KAAK,sBACLC,QAASN,IAEXU,OAAOb,MAKfH,EAAIiB,aAAe,CACjBf,KAAK,KACLC,KAAM,GACNF,YAAY,IAUd,O,wEC5BA,UAzDyB,SAAC,GAAwB,IAAD,EAArBiB,EAAqB,EAArBA,KAAM5B,EAAe,EAAfA,SAC1B6B,EAAOD,EAAKE,eACZC,GAAY,UAAAH,EAAKd,KAAKG,oBAAV,eAAwBhB,QAAxB,QACV+B,EAAmBJ,EAAnBI,SAAUC,EAASL,EAATK,KAElB,OACE,gBAAC,IAAD,CAAQjC,SAAUA,EAAUC,MAAO8B,GACjC,gBAAC,IAAD,CACE9B,MAAO4B,EAAKK,YAAYjC,MACxBU,YAAakB,EAAKK,YAAYvB,aAAekB,EAAKM,UAEpD,2BACE9B,UAAU,YACV+B,WAAS,EACTC,SAAS,6BAET,8BACE,sBAAIC,SAAS,YAAYT,EAAKK,YAAYjC,OAC1C,yBAAI4B,EAAKK,YAAYK,OAEvB,2BACEC,wBAAyB,CAAEC,OAAQZ,EAAKa,MACxCJ,SAAS,gBAEX,2BACA,uCAEF,uBAAKjC,UAAU,iBACb,sBACEsC,MAAO,CACLC,QAAQ,OACRC,SAAS,OACTC,eAAe,gBACfC,UAAU,OACVC,QAAS,IAGX,0BACGhB,GACC,gBAAC,EAAA1B,KAAD,CAAMC,GAAIyB,EAASiB,OAAOC,KAAMC,IAAI,QAApC,KACKnB,EAASE,YAAYjC,QAI9B,0BACGgC,GACC,gBAAC,EAAA3B,KAAD,CAAMC,GAAI0B,EAAKgB,OAAOC,KAAMC,IAAI,QAC7BlB,EAAKC,YAAYjC,MADpB","sources":["webpack://gatsby-starter-blog/./src/components/layout.js","webpack://gatsby-starter-blog/./src/components/seo.js","webpack://gatsby-starter-blog/./src/templates/blog-post.js"],"sourcesContent":["import * as React from 'react';\nimport { Link } from 'gatsby';\n\nconst Layout = ({ location, title, children }) => {\n  const rootPath = `${__PATH_PREFIX__}/`;\n  const isRootPath = location.pathname === rootPath;\n  let header;\n\n  if (isRootPath) {\n    header = (\n      <h1 className='main-heading'>\n        <Link to='/'>{title}</Link>\n      </h1>\n    );\n  } else {\n    header = (\n      <Link className='header-link-home' to='/'>\n        {title}\n      </Link>\n    );\n  }\n\n  return (\n    <div className='global-wrapper' data-is-root-path={isRootPath}>\n      <header className='global-header'>{header}</header>\n      <main>{children}</main>\n      <footer>© {new Date().getFullYear()} Sheep Null</footer>\n    </div>\n  );\n};\n\nexport default Layout;\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { Helmet } from 'react-helmet';\nimport { useStaticQuery, graphql } from 'gatsby';\n\nconst Seo = ({ description, lang, meta, title }) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            social {\n              twitter\n            }\n          }\n        }\n      }\n    `\n  );\n\n  const metaDescription = description || site.siteMetadata.description;\n  const defaultTitle = site.siteMetadata?.title;\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang\n      }}\n      title={title}\n      titleTemplate={defaultTitle ? `%s | ${defaultTitle}` : null}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription\n        },\n        {\n          property: `og:title`,\n          content: title\n        },\n        {\n          property: `og:description`,\n          content: metaDescription\n        },\n        {\n          property: `og:type`,\n          content: `website`\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata?.social?.twitter || ``\n        },\n        {\n          name: `twitter:title`,\n          content: title\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription\n        }\n      ].concat(meta)}\n    />\n  );\n};\n\nSeo.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``\n};\n\nSeo.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired\n};\n\nexport default Seo;\n","import * as React from 'react';\nimport { Link, graphql } from 'gatsby';\nimport Layout from '../components/layout';\nimport Seo from '../components/seo';\n\nconst BlogPostTemplate = ({ data, location }) => {\n  const post = data.markdownRemark;\n  const siteTitle = data.site.siteMetadata?.title || `Title`;\n  const { previous, next } = data;\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <Seo\n        title={post.frontmatter.title}\n        description={post.frontmatter.description || post.excerpt}\n      />\n      <article\n        className='blog-post'\n        itemScope\n        itemType='http://schema.org/Article'\n      >\n        <header>\n          <h1 itemProp='headline'>{post.frontmatter.title}</h1>\n          <p>{post.frontmatter.date}</p>\n        </header>\n        <section\n          dangerouslySetInnerHTML={{ __html: post.html }}\n          itemProp='articleBody'\n        />\n        <hr />\n        <footer>hoge</footer>\n      </article>\n      <nav className='blog-post-nav'>\n        <ul\n          style={{\n            display: `flex`,\n            flexWrap: `wrap`,\n            justifyContent: `space-between`,\n            listStyle: `none`,\n            padding: 0\n          }}\n        >\n          <li>\n            {previous && (\n              <Link to={previous.fields.slug} rel='prev'>\n                ← {previous.frontmatter.title}\n              </Link>\n            )}\n          </li>\n          <li>\n            {next && (\n              <Link to={next.fields.slug} rel='next'>\n                {next.frontmatter.title} →\n              </Link>\n            )}\n          </li>\n        </ul>\n      </nav>\n    </Layout>\n  );\n};\n\nexport default BlogPostTemplate;\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug(\n    $id: String!\n    $previousPostId: String\n    $nextPostId: String\n  ) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    markdownRemark(id: { eq: $id }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        description\n        tags\n      }\n    }\n    previous: markdownRemark(id: { eq: $previousPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n    next: markdownRemark(id: { eq: $nextPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n  }\n`;\n"],"names":["header","location","title","children","isRootPath","pathname","className","Link","to","Date","getFullYear","Seo","description","lang","meta","site","useStaticQuery","metaDescription","siteMetadata","defaultTitle","htmlAttributes","titleTemplate","name","content","property","social","twitter","concat","defaultProps","data","post","markdownRemark","siteTitle","previous","next","frontmatter","excerpt","itemScope","itemType","itemProp","date","dangerouslySetInnerHTML","__html","html","style","display","flexWrap","justifyContent","listStyle","padding","fields","slug","rel"],"sourceRoot":""}